{"version":3,"sources":["components/CardMatch/CardMatch.js","components/Title/Title.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CardMatch","props","onClick","imageClick","id","className","alt","name","src","image","Title","children","Wrapper","correctMatches","topScore","alertMsg","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","statetopScore","map","key","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+lCAceA,G,MAXG,SAAAC,GAAK,OACnB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAW,QACnD,yBAAKA,UAAU,iBACf,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCD9BC,G,MAFD,SAAAT,GAAK,OAAI,wBAAII,UAAU,SAASJ,EAAMU,YCErCC,G,MAFC,SAAAX,GAAK,OAAI,yBAAKI,UAAU,WAAWJ,EAAMU,Y,OCMrDE,G,MAAiB,GACjBC,EAAW,EACXC,EAAW,0EA+GAC,E,2MA1GfC,MAAQ,CACNC,UACAL,iBACAC,WACAC,Y,EAGFZ,WAAa,SAAAC,GAEb,IAAMc,EAAU,EAAKD,MAAMC,QAErBC,EAAeD,EAAQE,OAAO,SAAAC,GAAK,OAAIA,EAAMjB,KAAOA,IAG1D,GAAGe,EAAa,GAAGG,QAAS,CAE1BC,QAAQC,IAAK,oBAAsBX,GACnCU,QAAQC,IAAI,cAAgBV,GAE5BD,EAAiB,EACjBE,EAAW,+CAEX,IAAK,IAAIU,EAAE,EAAGA,EAAIP,EAAQQ,OAAQD,IAChCP,EAAQO,GAAGH,SAAU,EAGvB,EAAKK,SAAS,CAACZ,aACf,EAAKY,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACT,iBAEV,GAAIL,EAAiB,GAE1BM,EAAa,GAAGG,SAAU,EAI1BP,EAAW,4DAFXF,EAIqBC,IACnBA,EAAWD,EACX,EAAKc,SAAS,CAACb,cAGjBI,EAAQU,KAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,WAE9C,EAAKL,SAAS,CAACT,YACf,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,iBAER,CAELI,EAAa,GAAGG,SAAU,EAE1BT,EAAiB,EAEjBE,EAAW,qCACXD,EAAW,GACX,EAAKa,SAAS,CAACb,aAEf,IAAK,IAAIW,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IAClCP,EAAQO,GAAGH,SAAU,EAGvBJ,EAAQU,KAAK,SAASC,EAAGC,GAAI,MAAO,GAAMC,KAAKC,WAE/C,EAAKL,SAAS,CAACT,YACf,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,e,wEAKT,IAAD,OACT,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qBAAoB,+CACpB,wBAAIV,UAAU,gBACX4B,KAAKhB,MAAMF,UAGd,wBAAIV,UAAY,gBAAhB,oBACoB4B,KAAKhB,MAAMJ,eAC7B,6BAFF,cAGcoB,KAAKC,eAGlBD,KAAKhB,MAAMC,QAAQiB,IAAI,SAAAd,GAAK,OAC3B,kBAAC,EAAD,CACElB,WAAY,EAAKA,WACjBC,GAAIiB,EAAMjB,GACVgC,IAAKf,EAAMjB,GACXK,MAAOY,EAAMZ,e,GA7FH4B,aCUEC,QAEa,cAA7BC,OAAOC,SAASC,UAIe,UAA7BF,OAAOC,SAASC,UAIhBF,OAAOC,SAASC,SAASpB,MAEvB,2DC9BRqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4PzC,kBAAmBC,WAErBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAEjCA,EAAaC,iB","file":"static/js/main.3aca715c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CardMatch.css\";\n\nconst CardMatch = props => (\n    <div onClick={() => props.imageClick(props.id)} className =\"card\">\n            <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n</div>\n\n\n\n);\n\nexport default CardMatch;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React, {Component} from 'react';\nimport CardMatch from \"./components/CardMatch/CardMatch\";\nimport Title from \"./components/Title/Title\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport matches from \"./simpsonsCards.json\";\nimport './App.css';\n\n\n\nlet correctMatches = 0;\nlet topScore = 0;\nlet alertMsg = \"Click on an image to earn points, but don't click on any more than once\"\n\n\nclass App extends Component {\n\nstate = {\n  matches,\n  correctMatches,\n  topScore,\n  alertMsg\n};\n\nimageClick = id => {\n\nconst matches = this.state.matches;\n\nconst clickedMatch = matches.filter(match => match.id === id);\n\n\nif(clickedMatch[0].clicked) {\n\n  console.log (\"Correct Matches: \" + correctMatches);\n  console.log(\"Top Score: \" + topScore);\n\n  correctMatches = 0;\n  alertMsg = \"You already clicked on this one!  GAME OVER \"\n\n  for (let i=0; i < matches.length; i++) {\n    matches[i].clicked = false;\n  }\n\n  this.setState({alertMsg});\n  this.setState({correctMatches});\n  this.setState({matches});\n\n} else if (correctMatches < 11) {\n\n  clickedMatch[0].clicked = true;\n\n  correctMatches++;\n\n  alertMsg = \"Good job, you haven't clicked this one yet. Keep Going!\";\n\n  if (correctMatches > topScore) {\n    topScore = correctMatches;\n    this.setState({topScore});\n  }\n\n  matches.sort(function(a, b){return 0.5 - Math.random()});\n\n  this.setState({matches});\n  this.setState({correctMatches});\n  this.setState({alertMsg});\n  \n  } else {\n\n    clickedMatch[0].clicked = true;\n\n    correctMatches = 0;\n\n    alertMsg = \"Well Done! You got all 12 matches!\";\n    topScore = 12;\n    this.setState({topScore});\n\n    for (let i = 0; i < matches.length; i++) {\n      matches[i].clicked = false;\n    }\n\n    matches.sort(function(a, b) {return 0.5 - Math.random()});\n\n    this.setState({matches});\n    this.setState({correctMatches});\n    this.setState({alertMsg});\n\n  }\n};\n\nrender() {\nreturn (\n  <Wrapper>\n    <Title>Clicky-Game: <span>The Simpsons</span></Title>\n    <h2 className=\"scoreSummary\">\n      {this.state.alertMsg}\n    </h2>\n\n    <h2 className = \"scoreSummary\">\n      Correct Guesses: {this.state.correctMatches}\n      <br />\n      Top Score: {this.statetopScore}\n    </h2>\n\n    {this.state.matches.map(match => (\n      <CardMatch\n        imageClick={this.imageClick}\n        id={match.id}\n        key={match.id}\n        image={match.image}\n      />\n\n    ))}\n\n    </Wrapper>\n);\n\n}\n\n}\n\n\n \n\nexport default App;\n","// This optional code is used to register a service worker.\r\n\r\n// register() is not called by default.\r\n\r\n\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n\r\n// it offline capabilities. However, it also means that developers (and users)\r\n\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n\r\n// existing tabs open on the page have been closed, since previously cached\r\n\r\n// resources are updated in the background.\r\n\r\n\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n\r\n    window.location.hostname === 'localhost' ||\r\n  \r\n      // [::1] is the IPv6 localhost address.\r\n  \r\n      window.location.hostname === '[::1]' ||\r\n  \r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n  \r\n      window.location.hostname.match(\r\n  \r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  \r\n      )\r\n  \r\n  );\r\n  \r\n  \r\n  \r\n  export function register(config) {\r\n  \r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n  \r\n      // The URL constructor is available in all browsers that support SW.\r\n  \r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n  \r\n      if (publicUrl.origin !== window.location.origin) {\r\n  \r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n  \r\n        // from what our page is served on. This might happen if a CDN is used to\r\n  \r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n  \r\n        return;\r\n  \r\n      }\r\n  \r\n  \r\n  \r\n      window.addEventListener('load', () => {\r\n  \r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n  \r\n  \r\n        if (isLocalhost) {\r\n  \r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n  \r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n  \r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n  \r\n          // service worker/PWA documentation.\r\n  \r\n          navigator.serviceWorker.ready.then(() => {\r\n  \r\n            console.log(\r\n  \r\n              'This web app is being served cache-first by a service ' +\r\n  \r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n  \r\n            );\r\n  \r\n          });\r\n  \r\n        } else {\r\n  \r\n          // Is not localhost. Just register service worker\r\n  \r\n          registerValidSW(swUrl, config);\r\n  \r\n        }\r\n  \r\n      });\r\n  \r\n    }\r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  function registerValidSW(swUrl, config) {\r\n  \r\n    navigator.serviceWorker\r\n  \r\n      .register(swUrl)\r\n  \r\n      .then(registration => {\r\n  \r\n        registration.onupdatefound = () => {\r\n  \r\n          const installingWorker = registration.installing;\r\n  \r\n          if (installingWorker == null) {\r\n  \r\n            return;\r\n  \r\n          }\r\n  \r\n          installingWorker.onstatechange = () => {\r\n  \r\n            if (installingWorker.state === 'installed') {\r\n  \r\n              if (navigator.serviceWorker.controller) {\r\n  \r\n                // At this point, the updated precached content has been fetched,\r\n  \r\n                // but the previous service worker will still serve the older\r\n  \r\n                // content until all client tabs are closed.\r\n  \r\n                console.log(\r\n  \r\n                  'New content is available and will be used when all ' +\r\n  \r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n  \r\n                );\r\n  \r\n  \r\n  \r\n                // Execute callback\r\n  \r\n                if (config && config.onUpdate) {\r\n  \r\n                  config.onUpdate(registration);\r\n  \r\n                }\r\n  \r\n              } else {\r\n  \r\n                // At this point, everything has been precached.\r\n  \r\n                // It's the perfect time to display a\r\n  \r\n                // \"Content is cached for offline use.\" message.\r\n  \r\n                console.log('Content is cached for offline use.');\r\n  \r\n  \r\n  \r\n                // Execute callback\r\n  \r\n                if (config && config.onSuccess) {\r\n  \r\n                  config.onSuccess(registration);\r\n  \r\n                }\r\n  \r\n              }\r\n  \r\n            }\r\n  \r\n          };\r\n  \r\n        };\r\n  \r\n      })\r\n  \r\n      .catch(error => {\r\n  \r\n        console.error('Error during service worker registration:', error);\r\n  \r\n      });\r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n  \r\n    // Check if the service worker can be found. If it can't reload the page.\r\n  \r\n    fetch(swUrl)\r\n  \r\n      .then(response => {\r\n  \r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n  \r\n        const contentType = response.headers.get('content-type');\r\n  \r\n        if (\r\n  \r\n          response.status === 404 ||\r\n  \r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n  \r\n        ) {\r\n  \r\n          // No service worker found. Probably a different app. Reload the page.\r\n  \r\n          navigator.serviceWorker.ready.then(registration => {\r\n  \r\n            registration.unregister().then(() => {\r\n  \r\n              window.location.reload();\r\n  \r\n            });\r\n  \r\n          });\r\n  \r\n        } else {\r\n  \r\n          // Service worker found. Proceed as normal.\r\n  \r\n          registerValidSW(swUrl, config);\r\n  \r\n        }\r\n  \r\n      })\r\n  \r\n      .catch(() => {\r\n  \r\n        console.log(\r\n  \r\n          'No internet connection found. App is running in offline mode.'\r\n  \r\n        );\r\n  \r\n      });\r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  export function unregister() {\r\n  \r\n    if ('serviceWorker' in navigator) {\r\n  \r\n      navigator.serviceWorker.ready.then(registration => {\r\n  \r\n        registration.unregister();\r\n  \r\n      });\r\n  \r\n    }\r\n  \r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}