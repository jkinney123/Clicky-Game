{"version":3,"sources":["components/CardMatch/CardMatch.js","components/Title/Title.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CardMatch","props","onClick","imageClick","id","className","alt","name","src","image","Title","children","Wrapper","correctMatches","topScore","alertMsg","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","statetopScore","map","key","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+lCAceA,G,MAXG,SAAAC,GAAK,OACnB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAW,QACnD,yBAAKA,UAAU,iBACf,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCD9BC,G,MAFD,SAAAT,GAAK,OAAI,wBAAII,UAAU,SAASJ,EAAMU,YCErCC,G,MAFC,SAAAX,GAAK,OAAI,yBAAKI,UAAU,WAAWJ,EAAMU,Y,OCMrDE,G,MAAiB,GACjBC,EAAW,EACXC,EAAW,0EA+GAC,E,2MA1GfC,MAAQ,CACNC,UACAL,iBACAC,WACAC,Y,EAGFZ,WAAa,SAAAC,GAEb,IAAMc,EAAU,EAAKD,MAAMC,QAErBC,EAAeD,EAAQE,OAAO,SAAAC,GAAK,OAAIA,EAAMjB,KAAOA,IAG1D,GAAGe,EAAa,GAAGG,QAAS,CAE1BC,QAAQC,IAAK,oBAAsBX,GACnCU,QAAQC,IAAI,cAAgBV,GAE5BD,EAAiB,EACjBE,EAAW,+CAEX,IAAK,IAAIU,EAAE,EAAGA,EAAIP,EAAQQ,OAAQD,IAChCP,EAAQO,GAAGH,SAAU,EAGvB,EAAKK,SAAS,CAACZ,aACf,EAAKY,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACT,iBAEV,GAAIL,EAAiB,GAE1BM,EAAa,GAAGG,SAAU,EAI1BP,EAAW,4DAFXF,EAIqBC,IACnBA,EAAWD,EACX,EAAKc,SAAS,CAACb,cAGjBI,EAAQU,KAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,WAE9C,EAAKL,SAAS,CAACT,YACf,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,iBAER,CAELI,EAAa,GAAGG,SAAU,EAE1BT,EAAiB,EAEjBE,EAAW,qCACXD,EAAW,GACX,EAAKa,SAAS,CAACb,aAEf,IAAK,IAAIW,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IAClCP,EAAQO,GAAGH,SAAU,EAGvBJ,EAAQU,KAAK,SAASC,EAAGC,GAAI,MAAO,GAAMC,KAAKC,WAE/C,EAAKL,SAAS,CAACT,YACf,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,e,wEAKT,IAAD,OACT,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qBAAoB,+CACpB,wBAAIV,UAAU,gBACX4B,KAAKhB,MAAMF,UAGd,wBAAIV,UAAY,gBAAhB,oBACoB4B,KAAKhB,MAAMJ,eAC7B,6BAFF,cAGcoB,KAAKC,eAGlBD,KAAKhB,MAAMC,QAAQiB,IAAI,SAAAd,GAAK,OAC3B,kBAAC,EAAD,CACElB,WAAY,EAAKA,WACjBC,GAAIiB,EAAMjB,GACVgC,IAAKf,EAAMjB,GACXK,MAAOY,EAAMZ,e,GA7FH4B,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bbfee8c6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CardMatch.css\";\n\nconst CardMatch = props => (\n    <div onClick={() => props.imageClick(props.id)} className =\"card\">\n            <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n</div>\n\n\n\n);\n\nexport default CardMatch;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React, {Component} from 'react';\nimport CardMatch from \"./components/CardMatch/CardMatch\";\nimport Title from \"./components/Title/Title\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport matches from \"./simpsonsCards.json\";\nimport './App.css';\n\n\n\nlet correctMatches = 0;\nlet topScore = 0;\nlet alertMsg = \"Click on an image to earn points, but don't click on any more than once\"\n\n\nclass App extends Component {\n\nstate = {\n  matches,\n  correctMatches,\n  topScore,\n  alertMsg\n};\n\nimageClick = id => {\n\nconst matches = this.state.matches;\n\nconst clickedMatch = matches.filter(match => match.id === id);\n\n\nif(clickedMatch[0].clicked) {\n\n  console.log (\"Correct Matches: \" + correctMatches);\n  console.log(\"Top Score: \" + topScore);\n\n  correctMatches = 0;\n  alertMsg = \"You already clicked on this one!  GAME OVER \"\n\n  for (let i=0; i < matches.length; i++) {\n    matches[i].clicked = false;\n  }\n\n  this.setState({alertMsg});\n  this.setState({correctMatches});\n  this.setState({matches});\n\n} else if (correctMatches < 11) {\n\n  clickedMatch[0].clicked = true;\n\n  correctMatches++;\n\n  alertMsg = \"Good job, you haven't clicked this one yet. Keep Going!\";\n\n  if (correctMatches > topScore) {\n    topScore = correctMatches;\n    this.setState({topScore});\n  }\n\n  matches.sort(function(a, b){return 0.5 - Math.random()});\n\n  this.setState({matches});\n  this.setState({correctMatches});\n  this.setState({alertMsg});\n  \n  } else {\n\n    clickedMatch[0].clicked = true;\n\n    correctMatches = 0;\n\n    alertMsg = \"Well Done! You got all 12 matches!\";\n    topScore = 12;\n    this.setState({topScore});\n\n    for (let i = 0; i < matches.length; i++) {\n      matches[i].clicked = false;\n    }\n\n    matches.sort(function(a, b) {return 0.5 - Math.random()});\n\n    this.setState({matches});\n    this.setState({correctMatches});\n    this.setState({alertMsg});\n\n  }\n};\n\nrender() {\nreturn (\n  <Wrapper>\n    <Title>Clicky-Game: <span>The Simpsons</span></Title>\n    <h2 className=\"scoreSummary\">\n      {this.state.alertMsg}\n    </h2>\n\n    <h2 className = \"scoreSummary\">\n      Correct Guesses: {this.state.correctMatches}\n      <br />\n      Top Score: {this.statetopScore}\n    </h2>\n\n    {this.state.matches.map(match => (\n      <CardMatch\n        imageClick={this.imageClick}\n        id={match.id}\n        key={match.id}\n        image={match.image}\n      />\n\n    ))}\n\n    </Wrapper>\n);\n\n}\n\n}\n\n\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}